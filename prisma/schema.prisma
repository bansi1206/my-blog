// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  User
  Admin
  SuperAdmin
}

enum UserStatus {
  Inactive
  Actived
  Blocked
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(User)
  status        UserStatus @default(Actived)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bio           String?

  accounts Account[]
  sessions Session[]
  posts    Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String     @id @default(cuid())
  userId        String  
  thumbnail     String?     
  title         String?
  content       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
 

  @@index([userId])  
  categories CategoriesOnPosts[]
}

model Category {
   id            String     @id @default(cuid())
  title         String?     @default("")
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String // relation scalar field (used in the `@relation` attribute above)  

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model Image{
  id            String     @id @default(cuid())
  uid           String
  name          String?
  status        String
  url           String
}